# GitHub Actions Pipeline — Windows only (latest versions)
name: CI / Windows Build & Bundle

on:
  push:
    branches: [main, dev]
    tags:   ['v*.*.*']          # Trigger on version tags like v1.2.3
  pull_request:
    branches: [main, dev]

# Cancel any in‑progress run of the same branch/PR to save minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows:
    runs-on: windows-latest            # Always uses the most recent Windows image
    timeout-minutes: 60

    env:
      RUST_BACKTRACE: full
      FRONTEND_DIR: frontend           # Change if your SolidJS root lives elsewhere

    steps:
      # ──────────────────────────────────── 1. Checkout code ────────────────────────────────────
      - uses: actions/checkout@v4

      # ──────────────────────────────────── 2. Rust toolchain (stable, latest) ───────────────────
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      # ──────────────────────────────────── 3. Cache Cargo artefacts ────────────────────────────
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ github.workspace }}/src-tauri -> target
          # Only save cache on commits to default branches to avoid polluting cache on forks/PRs
          save-if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' }}

      # ──────────────────────────────────── 4. Node 22 & pnpm 10 (latest) ────────────────────────
      - uses: actions/setup-node@v4
        with:
          node-version: 22          # "Latest" stable Node (update here if new major arrives)
          cache: pnpm

      - uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false

      # ──────────────────────────────────── 5. JS deps ──────────────────────────────────────────
      - name: Install JS dependencies
        run: pnpm install --frozen-lockfile

      # ──────────────────────────────────── 6. Build frontend (Solid + Vite) ────────────────────
      - name: Build frontend
        run: pnpm run build
        working-directory: ${{ env.FRONTEND_DIR }}

      # ──────────────────────────────────── 7. Tauri build (Rust workspace) ─────────────────────
      - name: Build Windows bundle with Tauri
        run: cargo tauri build --ci --workspace --target x86_64-pc-windows-msvc

      # ──────────────────────────────────── 8. Upload artifacts ────────────────────────────────
      - uses: actions/upload-artifact@v4
        with:
          name: windows-bundles
          path: |
            src-tauri/target/release/bundle/windows/**/*.msi
            src-tauri/target/release/bundle/windows/**/*.exe
          if-no-files-found: error
          retention-days: 30

      # ──────────────────────────────────── 9. (Optional) Code signing ──────────────────────────
      # Uncomment & configure if you have Authenticode cert in GitHub Secrets
      # - name: Sign Windows binaries
      #   if: env.WINDOWS_CERT && env.WINDOWS_CERT_PASSWORD
      #   shell: powershell
      #   run: |
      #     $certPath = "windows.pfx"
      #     echo "${{ env.WINDOWS_CERT }}" | Out-File -Encoding ascii -NoNewline $certPath
      #     signtool sign /f $certPath /p ${{ env.WINDOWS_CERT_PASSWORD }} /tr http://timestamp.digicert.com /td sha256 src-tauri/target/release/bundle/windows/*.*
