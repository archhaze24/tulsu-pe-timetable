name: CI / Windows Build & Bundle

on:
  push:
    branches: [main, dev]
    tags:   ['v*.*.*']
  pull_request:
    branches: [main, dev]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: full

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      # Checkout sources
      - uses: actions/checkout@v4

      # Rust toolchain + cache (deps, build‑artifacts)
      - name: Setup Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Restore cargo/target cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v0-rust
          cache-targets: true
          cache-all-crates: false
          cache-bin: true

      # Node 22 & PNPM 10
      - name: Setup Node 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Enable Corepack & pin PNPM 10
        shell: pwsh
        run: |
          corepack enable
          corepack prepare pnpm@10 --activate
          pnpm -v

      # Detect pnpm store path + cache
      - name: Detect pnpm store path
        id: pnpm_cache_path
        shell: pwsh
        run: |
          $store = pnpm store path --silent
          Write-Host "pnpm store → $store"
          if (!(Test-Path $store)) { New-Item -ItemType Directory -Force -Path $store | Out-Null }
          "store_path=$store" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm_cache_path.outputs.store_path }}
          key: windows-pnpm-${{ hashFiles('src/pnpm-lock.yaml') }}
          restore-keys: |
            windows-pnpm-

      # JS deps & build (Solid frontend lives in src/)
      - name: Install JS deps (pnpm)
        working-directory: src
        shell: pwsh
        run: pnpm install --frozen-lockfile --prefer-offline
      - name: Build frontend
        working-directory: src
        shell: pwsh
        run: pnpm run build

      # cargo‑chef via cargo‑binstall — warm Rust deps cache
      - name: Install cargo-binstall (prebuilt)
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-binstall
      - name: Prepare & cook dependency graph (cargo‑chef)
        shell: pwsh
        run: |
          cargo binstall cargo-chef@0.1 --no-confirm --log-level warn
          cargo chef prepare --recipe-path recipe.json
          cargo chef cook --release --recipe-path recipe.json

      # tauri‑cli (prebuilt)
      - name: Install tauri‑cli (prebuilt)
        uses: taiki-e/install-action@v2
        with:
          tool: tauri-cli@2

      # Build Tauri bundle (only final crate; deps already cached)
      - name: Build Tauri bundle
        shell: pwsh
        run: cargo tauri build --ci

      # Upload Windows installers (MSI + NSIS)
      - name: Upload bundle artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-windows
          path: target/**/release/bundle/**/*
          if-no-files-found: error