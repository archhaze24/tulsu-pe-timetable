# GitHub Actions Pipeline — Windows‑only, latest toolchain
name: CI / Windows Build & Bundle

on:
  push:
    branches: [main, dev]
    tags: ['v*.*.*']            # e.g. v1.2.3
  pull_request:
    branches: [main, dev]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows:
    runs-on: windows-latest        # GitHub’s newest Windows image (currently Windows 2022)
    timeout-minutes: 60

    env:
      RUST_BACKTRACE: full
      FRONTEND_DIR: frontend       # Change if Solid/Vite lives elsewhere

    steps:
      # ──────────────────────────────────── 1. Checkout code ────────────────────────────────────
      - uses: actions/checkout@v4

      # ──────────────────────────────────── 2. Rust toolchain (stable) ──────────────────────────
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      # ──────────────────────────────────── 3. Cache Cargo artefacts ────────────────────────────
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ github.workspace }}/src-tauri -> target
          save-if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' }}

      # ──────────────────────────────────── 4. Node 22 & pnpm via Corepack ──────────────────────
      - uses: actions/setup-node@v4
        with:
          node-version: 22           # Bump here when new LTS arrives
          cache: 'pnpm'              # Adds ~/.local/share/pnpm to cache automatically

      - name: Enable pnpm 9 with Corepack
        run: |
          corepack enable
          corepack prepare pnpm@9 --activate
          pnpm --version            # Log version for diagnostics

      # ──────────────────────────────────── 5. JS deps ──────────────────────────────────────────
      - name: Install JS dependencies
        run: pnpm install --frozen-lockfile

      # ──────────────────────────────────── 6. Build frontend (Solid + Vite) ────────────────────
      - name: Build frontend
        run: pnpm run build
        working-directory: ${{ env.FRONTEND_DIR }}

      # ──────────────────────────────────── 7. Tauri build (Rust workspace) ─────────────────────
      - name: Build Windows bundle with Tauri
        run: cargo tauri build --ci --workspace --target x86_64-pc-windows-msvc

      # ──────────────────────────────────── 8. Upload artifacts ────────────────────────────────
      - uses: actions/upload-artifact@v4
        with:
          name: windows-bundles
          path: |
            src-tauri/target/release/bundle/windows/**/*.msi
            src-tauri/target/release/bundle/windows/**/*.exe
          if-no-files-found: error
          retention-days: 30

      # ──────────────────────────────────── 9. (Optional) Code signing ──────────────────────────
      # Provide WINDOWS_CERT (base64‑encoded .pfx) & WINDOWS_CERT_PASSWORD secrets to enable
      # - name: Sign Windows binaries
      #   if: env.WINDOWS_CERT && env.WINDOWS_CERT_PASSWORD
      #   shell: powershell
      #   run: |
      #     $certPath = "$env:TEMP\\windows.pfx"
      #     [IO.File]::WriteAllBytes($certPath, [Convert]::FromBase64String($env:WINDOWS_CERT))
      #     signtool sign /f $certPath /p $env:WINDOWS_CERT_PASSWORD /tr http://timestamp.digicert.com /td sha256 src-tauri/target/release/bundle/windows/*.*
